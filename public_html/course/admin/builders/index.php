<?php
 require_once( '../../common/config.ini' ); require_once( '../../common/users.php' ); require_once( '../../common/builders.php' ); require_once( '../../common/class_image.php' ); session_start(); $usersObj = new users(); $buildersObj = new builders(); if( $usersObj->get_auth_session( $_SESSION, $user )) { if( $usersObj->db_login( $user['email'], $user['password'], $auth=ADMIN_ROLL, $user )) { session_regenerate_id( TRUE ); } else { $userObj->session_dell(); } } else { header( 'Location:'.URL.'/admin/' ); } if( $_SERVER['REQUEST_METHOD'] == 'POST' || $_SERVER['REQUEST_METHOD'] == 'GET' ) { $buildersObj->get_data($_REQUEST, $form_data); (!isset($form_data['status'])) ? $form_data['status'] = '':NULL; (!isset($form_data['position'])) ? $form_data['position'] = '':NULL; (!isset($form_data['title'])) ? $form_data['title'] = '':NULL; } switch ($form_data['status']) { case 'top': if( !$buildersObj->get_all_top( $tops_data )) { $err['top'] = "トップページが作成されていません。"; } else { $tops_data['contents'] = htmlspecialchars_decode($tops_data['contents']); $tops_data['contents'] = str_replace('<script', '&lt;script', $tops_data['contents']); $tops_data['contents'] = str_replace('</script', '&lt;/script', $tops_data['contents']); $tops_data['contents'] = str_replace('<?php', '&lt;?php', $tops_data['contents']); $tops_data['contents'] = nl2br($tops_data['contents']); } require_once( 'list_top.php' ); break; case 'content': if( !$buildersObj->get_all_content( $contents_data )) { $err['content'] = "コンテンツページが作成されていません。"; } require_once( 'list_content.php' ); break; case 'sidebar': $buildersObj->get_all_sidebar( $sidebars_data ); $buildersObj->get_all_content( $contents_data ); if( !empty( $sidebars_data ) && !empty( $contents_data )) { foreach( $sidebars_data as $sidebar ) { if( !empty( $sidebar['contents_id'] )) { $contents_id[] = $sidebar['contents_id']; } } if( !empty( $contents_id )) { foreach( $contents_data as $content ) { if( !in_array( $content['id'], $contents_id )) { $id = $buildersObj->get_max_position_sidebar(); $sidebar['contents_id'] = $content['id']; $sidebar['side_title_id'] = NULL; $sidebar['position'] = $id+1; $buildersObj->db_add_sidebars( $sidebar ); } } } } if( !empty( $sidebars_data ) && empty( $contents_data )) { } if( empty( $sidebars_data ) && !empty( $contents_data )) { $buildersObj->make_sidebar( $contents_data ); } $buildersObj->get_all_sidebar( $sidebars_data ); $buildersObj->get_all_content( $contents_data ); if( empty( $sidebars_data ) && empty( $contents_data )) { $err['sidebars'] = "サイドバーが作成されていません。"; $err['contents'] = "コンテンツページが作成されていません。"; } if( !$buildersObj->get_all_side_freeareas( $side_freeareas_data )) { $err['freearea'] = "自由入力欄が作成されていません。"; } require_once( 'list_sidebar.php' ); break; case 'side_titles_add_done': $buildersObj->check_input_side_titles( $form_data ); $err = $buildersObj->get_err(); if( empty( $err )) { $form_data['public'] = 1; $buildersObj->db_add_side_titles( $form_data ); $id = $buildersObj->get_last_id(); $sidebar['side_title_id'] = $id; $sidebar['contents_id'] = NULL; if( empty($form_data['position']) ) { $max = $buildersObj->get_max_position_sidebar(); $sidebar['position'] = $max+1; } else { $sidebar['position'] = $form_data['position']; } $buildersObj->db_add_sidebars( $sidebar ); } else { $buildersObj->get_all_sidebar( $sidebars_data ); $buildersObj->get_all_content( $contents_data ); if( empty( $sidebars_data ) && empty( $contents_data )) { $err['sidebars'] = "サイドバーが作成されていません。"; $err['contents'] = "コンテンツページが作成されていません。"; } if( !$buildersObj->get_all_side_freeareas( $side_freeareas_data )) { $err['freearea'] = "自由入力欄が作成されていません。"; } require_once( 'list_sidebar.php' ); break; } header( 'Location:'.URL.'/admin/builders/?status=sidebar' ); break; case 'side_freeareas_edit': if($_SERVER["REQUEST_METHOD"] == "POST") { $buildersObj->check_input_side_freeareas( $form_data ); $err = $buildersObj->get_err(); if( empty( $err )) { $buildersObj->db_edit_side_freeareas( $form_data ); } } header( 'Location:'.URL.'/admin/builders/?status=sidebar' ); break; case 'side_freeareas_delete': if($_SERVER["REQUEST_METHOD"] == "POST") { $form_data['contents'] = ''; $buildersObj->db_edit_side_freeareas( $form_data ); } header( 'Location:'.URL.'/admin/builders/?status=sidebar' ); break; case 'side_position_edit': if($_SERVER["REQUEST_METHOD"] == "POST") { if( isset( $form_data['position'] )) { if( !isset( $form_data['side_title_id'] )) { $form_data['side_title_id'] = NULL; } elseif( !isset( $form_data['contents_id'] )) { $form_data['contents_id'] = NULL; } $buildersObj->db_edit_sidebars( $form_data ); } else { } } header( 'Location:'.URL.'/admin/builders/?status=sidebar' ); break; case 'sidebars_delete': if($_SERVER["REQUEST_METHOD"] == "POST") { $buildersObj->db_delete_side_titles( $form_data['side_title_id'] ); $buildersObj->db_delete_sidebars( $form_data['id'] ); } header( 'Location:'.URL.'/admin/builders/?status=sidebar' ); break; case 'upload': if( !$buildersObj->get_all_img_uploaders( $img_uploaders_data )) { $err['upload'] = "画像がアップロードされていません。"; } require_once( 'list_upload.php' ); break; case 'upload_done': $upload_key = 'images'; $img_path1 = 'images'; $img_path2 = date( "Ymd", time() ); $img_path = '../../'.$img_path1.'/'.$img_path2; if( !is_dir( $img_path )) { if( @mkdir( $img_path )) { } else { $err['upload'] = 'ディレクトリの作成に失敗しました。'; } } $result = $buildersObj->upload( $data, $upload_key, $img_path ); if( $result === TRUE) { $data['title'] = pathinfo( $data['org_file'], PATHINFO_FILENAME ); $data['store_folder'] = $img_path1.'/'.$img_path2; $data['thumbnail'] = 'thum-'.$data['store_file']; $buildersObj->db_add_img_uploaders( $data ); $data['store_folder'] = '../../'.$data['store_folder']; $buildersObj->make_thumbnail( $data ); } else { $err['upload'] = $result; $buildersObj->get_all_img_uploaders( $img_uploaders_data ); require_once( 'list_upload.php' ); break; } header( 'Location:'.URL.'/admin/builders/?status=upload' ); break; case 'upload_delete': if($_SERVER["REQUEST_METHOD"] == "POST") { $buildersObj->get_img_uploaders( $form_data['id'], $data ); $data['store_folder'] = '../../'.$data['store_folder']; $buildersObj->del_img_file( $data ); $buildersObj->db_delete_img_uploaders( $form_data['id'] ); } header( 'Location:'.URL.'/admin/builders/?status=upload' ); break; default: $form_data['status'] = 'default'; require_once( 'top.php' ); break; } ?>